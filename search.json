[{"path":"https://docs.ropensci.org/osmplotr/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/CONTRIBUTING.html","id":"opening-issues","dir":"","previous_headings":"","what":"Opening issues","title":"Contributing to osmplotr","text":"easiest way note behavioural curiosities request new features opening github issue.","code":""},{"path":"https://docs.ropensci.org/osmplotr/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to osmplotr","text":"’d like contribute changes osmplotr, use GitHub flow proposing, submitting, reviewing, accepting changes. haven’t done , ’s nice overview git , well best practices submitting pull requests . osmplotr coding style diverges somewhat commonly used R style guide, primarily following two ways, improve code readability: (1) curly braces vertically aligned: (2) Also highlighted code additional whitespace permeates osmplotr code. Words text separated whitespace, code words : natural result one ends writing space function (). ’s .","code":"this <- function () {     x <- 1 } this <- function(){     x <- 1 } this <- function1 (function2 (x)) this <- function1(function2(x)) this <- function ()"},{"path":"https://docs.ropensci.org/osmplotr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to osmplotr","text":"want encourage warm, welcoming, safe environment contributing project. See code conduct information.","code":""},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Basic Maps","text":"map can generated using following simple steps: Specify bounding box desired region Download desired data—case, building perimeters. Initiate osm_basemap desired background (bg) colour Add desired plotting objects desired colour. Print map  function print_osm_map creates graphics device scaled bounding box map. Note also osmplotr maps contain margins fill entire plot area, reflecting general layout printed maps. Additional capabilities osmplotr described following sections, beginning downloading extraction data.","code":"bbox <- get_bbox (c (-0.13, 51.51, -0.11, 51.52)) dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, dat_B, col = \"gray40\") print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"downloading-data","dir":"Articles","previous_headings":"","what":"2. Downloading Data","title":"Basic Maps","text":"package osmdata used download data ‘OpenStreetMap’ using ‘overpass’ API overpass API. Data may returned either ‘Simple Features’ (sf) ‘R Spatial’ (sp) form. osmplotr convenience function, extract_osm_objects, allow direct import, functions osmdata can also used directly. Data particular type can extracted specifying appropriate OSM key, example: objects appropriate Spatial classes: Spatial (sp) objects may returned , otherwise sf used default format. Simple Features (sf) objects polygons London buildings linestrings highways respectively contain … 1,759 building polygons 1,133 highway lines. extract_osm_objects also accepts key-value pairs passed overpass API : Trees located single coordinates thus point objects:","code":"bbox <- get_bbox (c (-0.13, 51.51, -0.11, 51.52)) dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) dat_H <- extract_osm_objects (key = \"highway\", bbox = bbox) class (dat_B) ## [1] \"sf\"         \"data.frame\" class (dat_H) ## [1] \"sf\"         \"data.frame\" class (dat_B$geometry) ## [1] \"sfc_POLYGON\" \"sfc\" class (dat_H$geometry) ## [1] \"sfc_LINESTRING\" \"sfc\" dat_B <- extract_osm_objects (key = \"building\", bbox = bbox, sf = FALSE) nrow (dat_B) ## [1] 1767 nrow (dat_H) ## [1] 1220 dat_T <- extract_osm_objects (key = \"natural\", value = \"tree\", bbox = bbox) class (dat_T$geometry) ## [1] \"sfc_POINT\" \"sfc\" nrow (dat_T) ## [1] 688"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"osmdata","dir":"Articles","previous_headings":"2. Downloading Data","what":"2.1 osmdata","title":"Basic Maps","text":"osmdata package provides powerful interface downloading OSM data, may used directly osmplotr. osmplotr function extract_osm_objects effectively just convenience wrapper around omsdata functionality. primary differences two : osmdata returns spatial data given query; , points, lines, polygons, multilines, multipolygons, osmplotr returns single specified geometric type. osmplotr accepts multiple key-value pairs single call extract_osm_objects, equivalent osmdata function, add_feature, accepts single key-value pair, queries successively build multiple calls add_feature. differences illustrated following code generates identical results cases (namespaces explicitly given aid clarity), osmdata function opq() constructs overpass query, successive calls add_feature extending query finally submitted overpass osmdata_sf() (sp version osmdata_sp()). Note add_feature() called twice case, single call add_feature (key = 'highway\", value = \"!primary\") request features primary highways. initial query key = \"highway\" ensures npn-primary highways returned.","code":"dat1 <- osmplotr::extract_osm_objects (     key = \"highway\", value = \"!primary\",     bbox = bbox ) dat2 <- osmdata::opq (bbox = bbox) %>%     add_feature (key = \"highway\") %>%     add_feature (key = \"highway\", value = \"!primary\") %>%     osmdata_sf () dat2 <- dat2$osm_lines"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"negation","dir":"Articles","previous_headings":"2. Downloading Data","what":"2.2 Negation","title":"Basic Maps","text":"demonstrated , negation can specified pre-pending ! value argument , example, natural objects trees can extracted message generated course request anything tree kind spatial object. osmplotr makes several educated guesses absence specified return types, can always forced return_type parameter: london$dat_H contains non-primary highways, extracted call demonstrated , london$dat_HP contains corresponding set exclusively primary highways. osmplotr request key = \"highway\" automatically returns line objects (although, , kinds objects may forced specifying return_type).","code":"dat_NT <- extract_osm_objects (bbox = bbox, key = \"natural\", value = \"!tree\") ## Cannot determine return type; maybe specify explicitly? pts_NT <- extract_osm_objects (     bbox = bbox, key = \"natural\", value = \"!tree\",     return_type = \"points\" )"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"additional-key-value-pairs","dir":"Articles","previous_headings":"2. Downloading Data","what":"2.3 Additional key-value pairs","title":"Basic Maps","text":"number key-value pairs may passed extract_osm_objects. example, named building can extracted data stored london$dat_RFH. Note periods dots used white space, fact symbolise (grep terms) character whatsoever. polygon building particular street address can extracted data stored london$dat_ST. Note addresses generally require combining addr:street addr:housenumber.","code":"bbox <- get_bbox (c (-0.13, 51.50, -0.11, 51.52)) extra_pairs <- c (\"name\", \"Royal.Festival.Hall\") dat <- extract_osm_objects (     key = \"building\", extra_pairs = extra_pairs,     bbox = bbox ) extra_pairs <- list (     c (\"addr:street\", \"Stamford.St\"),     c (\"addr:housenumber\", \"150\") ) dat <- extract_osm_objects (     key = \"building\", extra_pairs = extra_pairs,     bbox = bbox )"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"downloading-with-osm_structures-and-make_osm_map","dir":"Articles","previous_headings":"2. Downloading Data","what":"2.4 Downloading with osm_structures and make_osm_map","title":"Basic Maps","text":"functions osm_structures make_osm_map aid downloading multiple OSM data types plotting (latter described ). osm_structures returns data.frame OSM structure types, associated key-value pairs, unique suffices may appended data structures storage purposes, suggested colours. Passing list make_osm_map return list requested OSM data items, named combining dat_prefix specified make_osm_map suffices specified osm_structures. Many structures identified keys , cases values empty strings. last row osm_structures exists define background colour map, explained (4.3 Automating map production). suffices include many letters necessary represent unique structure names. make_osm_map returns list two components: osm_data containing data objects passed osm_structures argument. existing osm_data may also submitted make_osm_map, case objects present submitted data appended returned version. osm_data submitted, objects osm_structures downloaded returned. map containing ggplot2 map objects layers overlaid according sequence colour schemes specified osm_structures data specified osm_structures can downloaded simply calling: requested data contained dat$osm_data. list desired structures can also passed function, example, Passing make_osm_map download two structures. Finally, note example , demonstrates osm_structures converts number common keys OSM-appropriate key-value pairs.","code":"osm_structures () ##     structure      key value suffix      cols ## 1    building building           BU #646464FF ## 2     amenity  amenity            A #787878FF ## 3    waterway waterway            W #646478FF ## 4       grass  landuse grass      G #64A064FF ## 5     natural  natural            N #647864FF ## 6        park  leisure  park      P #647864FF ## 7     highway  highway            H #000000FF ## 8    boundary boundary           BO #C8C8C8FF ## 9        tree  natural  tree      T #64A064FF ## 10 background                          gray20 osm_structures ()$value [1:4] ## [1] \"\"      \"\"      \"\"      \"grass\" dat <- make_osm_map (structures = osm_structures (), bbox = bbox) names (dat) ## [1] \"osm_data\" \"map\" sapply (dat, class) ## $osm_data ## [1] \"list\" ##  ## $map ## [1] \"gg\"     \"ggplot\" names (dat$osm_data) ## [1] \"dat_BU\" \"dat_A\"  \"dat_W\"  \"dat_G\"  \"dat_N\"  \"dat_P\"  \"dat_H\"  \"dat_BO\" ## [9] \"dat_T\" osm_structures (structures = c (\"building\", \"highway\")) ##    structure      key value suffix      cols ## 1   building building            B #646464FF ## 2    highway  highway            H #000000FF ## 3 background                          gray20 osm_structures (structures = \"grass\") ##    structure     key value suffix      cols ## 1      grass landuse grass      G #64A064FF ## 2 background                         gray20"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"the-london-data-of-osmplotr","dir":"Articles","previous_headings":"2. Downloading Data > 2.4 Downloading with osm_structures and make_osm_map","what":"2.4.1 The london data of osmplotr","title":"Basic Maps","text":"illustrate use osm_structures download data, section reproduces code used generate london data object forms part osmplotr package. Suffices generated automatically structure names , values, suffices negated forms must therefore specified manually. london data can downloaded simply calling make_osm_map: requested data contained $osm_data list item. make_osm_map also returns $map item described (see 4.3 Automating map production).","code":"structures <- c (     \"highway\", \"highway\", \"building\", \"building\", \"building\",     \"amenity\", \"park\", \"natural\", \"tree\" ) structs <- osm_structures (structures = structures, col_scheme = \"dark\") structs$value [1] <- \"!primary\" structs$value [2] <- \"primary\" structs$suffix [2] <- \"HP\" structs$value [3] <- \"!residential\" structs$value [4] <- \"residential\" structs$value [5] <- \"commercial\" structs$suffix [3] <- \"BNR\" structs$suffix [4] <- \"BR\" structs$suffix [5] <- \"BC\" london <- make_osm_map (structures = structs, bbox = bbox)$osm_data"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"downloading-connected-highways","dir":"Articles","previous_headings":"","what":"3. Downloading connected highways","title":"Basic Maps","text":"visualisation functions described second osmplotr vignette (Data maps) enable particular regions maps highlighted. may often desirable highlight regions according user’s data, osmplotr also enables regions defined providing list names encircling highways. function achieves connect_highways, returns sequential matrix coordinates segments named highways connected continuously sequentially form single enclosed space. example , Note use regex character ? declares previous character optional. matches “Shorts Gardens” “Short’s Gardens”, appear OSM data. extraction bounding polygons named highways fail-safe, may generate various warning messages. understand kinds conditions may work, useful examine connect_highways detail.","code":"highways <- c (     \"Monmouth.St\", \"Short.?s.Gardens\", \"Endell.St\", \"Long.Acre\",     \"Upper.Saint.Martin\" ) highways1 <- connect_highways (highways = highways, bbox = bbox) class (highways1) ## [1] \"list\" length (highways1) ## [1] 5 highways1 [[1]] [[1]] ##                   lon      lat ## 1678452807 -0.1270287 51.51370 ## 2265298898 -0.1270523 51.51362 ## 438170687  -0.1270865 51.51347 ## 3192197694 -0.1270902 51.51345 ## 9513062    -0.1271692 51.51288"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"connect_highways-in-detail","dir":"Articles","previous_headings":"3. Downloading connected highways","what":"3.1 connect_highways in detail","title":"Basic Maps","text":"connect_highways takes list OpenStreetMap highways sequentially connects closest nodes adjacent highways set named highways connects form cycle. Cases circular connection possible generate error message. routine proceeds three stages , Adding intersection nodes junctions ways don’t already exist Filling connectivity matrix listed highways extracting longest cycle connecting Inserting extra connections highways length longest cycle equal length (highways). procedure can guaranteed fail-safe owing inherently unpredictable nature OpenStreetMap, well unknown relationships named highways. enable problematic cases examined hopefully resolved, connect_highways plot option:  plot depicts highway different colour, along numbers start end points segment. plot reveals case highway#6 (“Aldwych”) actually nested within two components highway#4 (“Strand”). connect_highways searches shortest path connecting named highways, since “Strand” connects highways#1 #5, shortest path excludes #6. exclusion one named components generates warning message. connected polygons returned connect_highways can used highlight enclosed regions within maps, demonstrated second vignette, ‘Data Maps’.","code":"bbox_big <- get_bbox (c (-0.15, 51.5, -0.10, 51.52)) highways <- c (     \"Kingsway\", \"Holborn\", \"Farringdon.St\", \"Strand\",     \"Fleet.St\", \"Aldwych\" ) highway_list <- connect_highways (     highways = highways, bbox = bbox_big,     plot = TRUE ) ## Warning: Cycle unable to be extended through all ways"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"producing-maps","dir":"Articles","previous_headings":"","what":"4. Producing maps","title":"Basic Maps","text":"Maps generally contain multiple kinds OSM data, example, illustrated , plotting maps requires first making basemap specified background colour. Portions maps can also plotted creating basemap smaller bounding box. map ggplot2 may viewed simply passing print_osm_map:  graphical parameters can also passed add_osm_objects, border colours line widths types. example,  size argument passed corresponding ggplot2 routine plotting polygons, lines, points, respectively determines widths lines (polygon outlines lines), sizes points. col argument determines fill colour polygons, colour lines points.  Note also shape parameter determines point shape, details see ?ggplot2::shape. Also note plot order affects final outcome, components sequentially overlaid thus map components plotted different order generally produce different result.","code":"dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) dat_H <- extract_osm_objects (key = \"highway\", bbox = bbox) dat_T <- extract_osm_objects (key = \"natural\", value = \"tree\", bbox = bbox) bbox_small <- get_bbox (c (-0.13, 51.51, -0.11, 51.52)) map <- osm_basemap (bbox = bbox_small, bg = \"gray20\") map <- add_osm_objects (map, dat_H, col = \"gray70\") map <- add_osm_objects (map, dat_B, col = \"gray40\") print_osm_map (map) map <- osm_basemap (bbox = bbox_small, bg = \"gray20\") map <- add_osm_objects (map, dat_B,     col = \"gray40\", border = \"orange\",     size = 0.2 ) print_osm_map (map) map <- add_osm_objects (map, dat_H, col = \"gray70\", size = 0.7) map <- add_osm_objects (map, dat_T, col = \"green\", size = 2, shape = 1) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"saving-maps","dir":"Articles","previous_headings":"4. Producing maps","what":"4.1 Saving Maps","title":"Basic Maps","text":"function print_osm_map() can used print either -screen graphical devices graphics files (see, example, ?png list possible graphics devices). Sizes resolutions devices may specified appropriate parameters. Device dimensions scaled default proportions bounding box (although can -ridden). screen-based device simply requires examples writing higher resolution versions files include:","code":"print_osm_map (map) print_osm_map (map,     filename = \"map.png\", width = 10,     units = \"in\", dpi = map_dpi ) print_osm_map (map,     filename = \"map.eps\", width = 1000,     units = \"px\", dpi = map_dpi ) print_osm_map (map, filename = \"map\", device = \"jpeg\", width = 10, units = \"cm\")"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"plotting-different-osm-structures","dir":"Articles","previous_headings":"4. Producing maps","what":"4.2 Plotting different OSM Structures","title":"Basic Maps","text":"ability demonstrated use negation extract-osm-objects allows different kinds object visually contrasted, example primary non-primary highways:  additional key-value pairs demonstrated (Royal Festival Hall, dat_RFH 150 Stamford Street, dat_ST) also demonstrated allow highly customised maps distinct objects plotting different colour schemes.","code":"dat_HP <- extract_osm_objects (key = \"highway\", value = \"primary\", bbox = bbox) dat_H <- extract_osm_objects (key = \"highway\", value = \"!primary\", bbox = bbox) map <- osm_basemap (bbox = bbox_small, bg = \"gray20\") map <- add_osm_objects (map, dat_H, col = \"gray50\") map <- add_osm_objects (map, dat_HP, col = \"gray80\", size = 2) print_osm_map (map) bbox_small2 <- get_bbox (c (-0.118, 51.504, -0.110, 51.507)) map <- osm_basemap (bbox = bbox_small2, bg = \"gray95\") map <- add_osm_objects (map, dat_H, col = \"gray80\") map <- add_osm_objects (map, dat_HP, col = \"gray20\", size = 2) map <- add_osm_objects (map, dat_RFH, col = \"orange\", border = \"red\", size = 2) map <- add_osm_objects (map, dat_ST, col = \"skyblue\", border = \"blue\", size = 2) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"filling-within-boundary-lines","dir":"Articles","previous_headings":"4. Producing maps","what":"4.3 Filling within boundary lines","title":"Basic Maps","text":"Different portions map may sometimes delineated lines, example coastlines always represented OpenStreetMap lines. Plotting water land either side coastline single block colour requires regions polygons, lines. osmplotr function osm_line2poly() converts boundary lines extending beyond given bounding box polygons encircling perimeter bounding box. example given ?osm_line2poly, using osmdata package obtain bounding box named region, magrittr pipe operator. osm_line2poly() function returns list two sf polygons. coastline, one correspond water, one land. preceding example, first polygon ocean, coloured \"lightsteelblue\". Users must determine polygon plotted colour. Note osm_line2poly() accepts sf-formatted data, sp.","code":"library (osmdata) bb <- osmdata::getbb (\"melbourne, australia\") coast <- extract_osm_objects (     bbox = bb, key = \"natural\", value = \"coastline\",     return_type = \"line\" ) coast <- osm_line2poly (coast, bbox = bb) map <- osm_basemap (bbox = bb) %>%     add_osm_objects (coast [[1]], col = \"lightsteelblue\") %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"automating-map-production","dir":"Articles","previous_headings":"4. Producing maps","what":"4.4 Automating map production","title":"Basic Maps","text":"indicated (2.4 Downloading osm_structures make_osm_map), production maps overlaying various type OSM objects facilitated make_osm_map. structure map defined osm_structures described . Producing map customised data simple ,  Calling make_osm_map() downloads requested structures within given bbox returns list two components, first contains downloaded data: Pre-downloaded data may also passed make_osm_map()  Note omitting bounding box argument (bbox) produces map bounding box extracted largest box spanning objects osm_data. may considerably larger desired boundaries, particularly highways returned overpass entirety, generally extend well beyond specified bounding box. Finally, objects maps overlaid plot according order rows osm_structures, single exception background plotted first. order can readily changed restricted simply submitting structures desired order.","code":"structs <- c (\"highway\", \"building\", \"park\", \"tree\") structures <- osm_structures (structures = structs, col_scheme = \"light\") dat <- make_osm_map (structures = structures, bbox = bbox_small) print_osm_map (dat$map) names (dat) ## [1] \"osm_data\" \"map\" names (dat$osm_data) ## [1] \"dat_B\" \"dat_H\" \"dat_P\" \"dat_A\" \"dat_P\" \"dat_T\" dat <- make_osm_map (     structures = structures, osm_data = dat$osm_data,     bbox = bbox ) print_osm_map (dat$map) structs <- c (\"amenity\", \"building\", \"highway\", \"park\") osm_structures (structs, col_scheme = \"light\") ##    structure      key value suffix      cols ## 1    amenity  amenity            A #DCDCDCFF ## 2   building building            B #C8C8C8FF ## 3    highway  highway            H #969696FF ## 4       park  leisure  park      P #C8DCC8FF ## 5 background                          gray95"},{"path":"https://docs.ropensci.org/osmplotr/articles/basic-maps.html","id":"axes","dir":"Articles","previous_headings":"4. Producing maps","what":"4.5 Axes","title":"Basic Maps","text":"Axes may added maps using add_axes function. contrast many R packages producing maps, maps osmplotr fill entire plotting space, axes added internal space. separate function adding axes allows overlaid top previous layers. Axes added dark version previous map look like : Note , described , make_osm_map returns list two items: () potentially modified data ($osm_data) (ii) map object ($map). add_ functions take map object one argument return single value modified map object.  map reveals axes labels printed semi-transparent background rectangles, transparency controlled alpha parameter. Axes always plotted left lower side, positions can adjusted pos parameter specifies positions axes labels relative entire plot device  second call add_axes overlaid additional axes map already axes previous call. call also demonstrates sizes font characteristics text labels can specified. Finally, current version osmplotr allow text labels axes rotated. (semi-transparent underlays generated ggplot2::geom_label currently prevents rotation.) Click following link proceed second osmplotr vignette: Data maps","code":"structures <- osm_structures (structures = structs, col_scheme = \"dark\") dat <- make_osm_map (     structures = structures, osm_data = dat$osm_dat,     bbox = bbox_small ) map <- add_axes (dat$map, colour = \"black\") print_osm_map (map) map <- add_axes (map,     colour = \"blue\", pos = c (0.1, 0.2),     fontsize = 5, fontface = 3, fontfamily = \"Times\" ) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"categorical-data-add_osm_groups","dir":"Articles","previous_headings":"","what":"1. Categorical data: add_osm_groups","title":"Data Maps","text":"function add_osm_groups enables spatially-defined groups plotted different colours. two primary arguments obj, defines OSM structure used plotting regions, groups list geometric coordinates defining desired regions. example obj Simple Features (sf) data.frame building polygons downloaded first vignette following line data may obtained simply combining data provided package residential non-residential buildings give buildings direct way define groups specifying coordinates boundary points:  Multiple groups can defined passing list multiple sets point coordinates groups argument add_osm_groups, specifying corresponding colours.  bg argument specifies colour objects lying outside boundaries specified groups. argument given, objects assigned nearest group, groups fill entire map.  Now ’ve seen general workflow osmplotr, let’s repeat previous code, streamline magrittr’s %>% function. allows us pipe functions together instead re-assigning map variable.","code":"dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) dat_B <- rbind (london$dat_BNR, london$dat_BR) pts <- cbind (     c (-0.115, -0.125, -0.125, -0.115),     c (51.513, 51.513, 51.517, 51.517) )  map <- osm_basemap (     bbox = bbox,     bg = \"gray20\" )  map <- add_osm_groups (map,     dat_B,     groups = pts,     cols = \"orange\",     bg = \"gray40\" )  print_osm_map (map) pts2 <- cbind (     c (-0.111, -0.1145, -0.1145, -0.111),     c (51.517, 51.517, 51.519, 51.519) )  map <- osm_basemap (     bbox = bbox,     bg = \"gray20\" )  map <- add_osm_groups (map,     dat_B,     groups = list (pts, pts2),     cols = c (\"orange\", \"tomato\"),     bg = \"gray40\" )  print_osm_map (map) map <- osm_basemap (     bbox = bbox,     bg = \"gray20\" )  map <- add_osm_groups (map,     dat_B,     groups = list (pts, pts2),     cols = c (\"orange\", \"tomato\") )  print_osm_map (map) library (magrittr)  osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_groups (dat_B,         groups = list (pts, pts2),         cols = c (\"orange\", \"tomato\")     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"hulls-around-groups","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.1 Hulls around groups","title":"Data Maps","text":"add_osm_groups includes argument make_hull specifies whether convex hulls fitted around points defining provided groups, whether groups already define boundaries (default behaviour). point added internal four points defining first groups, group boundary connect point create concave shape.  previous points started south-east ended north-east, thus concave boundary extends two easterly points. Setting make_hull = TRUE defines groups convex hulls surrounding , case revert map initial map group defined regular, convex perimeter.","code":"pts <- rbind (pts, c (-0.12, 51.515))  osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_groups (dat_B,         groups = pts,         cols = \"orange\",         bg = \"gray40\"     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"inclusive-exclusive-and-bisected-polygons","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.2 Inclusive, exclusive, and bisected polygons","title":"Data Maps","text":"highlighted regions previous maps irregular default behaviour add_osm_groups include within group OSM objects lie entirely within group boundary. add_osm_groups boundary argument defines whether objects assigned groups inclusively (boundary > 0) exclusively (boundary < 0), whether precisely bisected group boundary (boundary = 0). previous maps illustrate default option (boundary = -1), two options produce following maps.  inclusive option (boundary>0) includes objects points lying within boundary, meaning objects included resulting larger regions previous default exclusive option. Precisely bisecting boundaries produces following map.  ability combine different kinds boundaries particularly useful highlighting areas partially contain large polygons parks. parks within following maps downloaded (Noting , described first vignette, Basic maps, extract_osm_objects make_osm_map convert several common keys appropriate key-value pairs, reveals key actually converted key = \"leisure\" value = \"park\".) data also provided package london$dat_P. Plotting buildings inclusively within group overlaying parks bisected group boundaries produces following map:  Bisection divides single polygons form one polygon points lying within given boundary one polygon points lying outside boundary. two resultant polygons often separated visible gaps locations defined. layers plot progressively overlaid, gaps can avoided initially plotting underlying layers using add_osm_objects prior grouping objects:  Bisections boundary = 0 accurate underlying OSM data. example chosen highlight bisection may inaccurate actual OSM points lie near desired bisection line. larger map, less visually evident likely inaccuracies. Finally, note plot order changed allow building within park overlaid upon grass surfaces. Plot order, whether controlled manually make_osm_map, may often tweaked appropriately visualise objects. boundary argument effect bg given, case objects assigned group boundaries groups , non-grouped objects.","code":"osm_basemap (bbox = bbox, bg = \"gray20\") %>%     add_osm_groups (dat_B,         groups = list (pts, pts2),         make_hull = TRUE,         cols = c (\"orange\", \"tomato\"),         bg = \"gray40\",         boundary = 1     ) %>%     print_osm_map () osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_groups (dat_B,         groups = list (pts, pts2),         make_hull = TRUE,         cols = c (\"orange\", \"tomato\"),         bg = \"gray40\",         boundary = 0     ) %>%     print_osm_map () dat_P <- extract_osm_objects (key = \"park\", bbox = bbox) osm_structures (structure = \"park\") ##    structure     key value suffix      cols ## 1       park leisure  park      P #647864FF ## 2 background                         gray20 col_park_in <- rgb (50, 255, 50, maxColorValue = 255) col_park_out <- rgb (50, 155, 50, maxColorValue = 255)  osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_groups (dat_B,         groups = list (pts, pts2),         make_hull = TRUE,         cols = c (\"orange\", \"tomato\"),         bg = \"gray40\",         boundary = 0     ) %>%     add_osm_groups (dat_P,         groups = list (pts, pts2),         cols = rep (col_park_in, 2),         bg = col_park_out,         boundary = 0     ) %>%     print_osm_map () map <- osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_objects (dat_P,         col = col_park_out     ) %>%     add_osm_groups (dat_P,         groups = list (pts, pts2),         cols = rep (col_park_in, 2),         bg = col_park_out,         boundary = 0     ) %>%     add_osm_groups (dat_B,         groups = list (pts, pts2),         make_hull = TRUE,         cols = c (\"orange\", \"tomato\"),         bg = \"gray40\",         boundary = 0     )  map %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"adjusting-colours-with-adjust_colours","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.3 Adjusting colours with adjust_colours","title":"Data Maps","text":"adjust_colours function allows different groups highlighted slightly different colours different kinds OSM objects. example, following code adds highways map slightly darkened versions highlight colours (using boundary = 1, highways points lying within bounding box included groups):  course adjust_colours (\"gray40\", adj = -0.2) nothing “gray32”, adj = -0.4 gives “gray24”.","code":"# create separate data for all highways and primary highways dat_H <- rbind (london$dat_H, london$dat_HP) dat_HP <- london$dat_HP  # darken colours by aboud 20% cols_adj <- adjust_colours (c (\"orange\", \"tomato\"),     adj = -0.2 )  map %>%     add_osm_groups (dat_HP,         groups = list (pts, pts2),         make_hull = TRUE,         cols = cols_adj,         bg = adjust_colours (\"gray40\",             adj = -0.4         ),         boundary = 1, size = 2     ) %>%     add_osm_groups (dat_H,         groups = list (pts, pts2),         make_hull = TRUE,         cols = cols_adj,         bg = adjust_colours (\"gray40\",             adj = -0.2         ),         boundary = 1,         size = 1     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"dark-on-light-highlights","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.4 Dark-on-Light Highlights","title":"Data Maps","text":"particularly effective way highlight single regions within map using dark colours upon otherwise light coloured maps.","code":"osm_basemap (bbox = bbox, bg = \"gray95\") %>%     add_osm_groups (dat_B,         groups = pts,         cols = \"gray40\",         bg = \"gray85\",         boundary = 1     ) %>%     add_osm_groups (dat_H,         groups = pts,         cols = \"gray20\",         bg = \"gray70\",         boundary = 0     ) %>%     add_osm_groups (dat_HP,         groups = pts,         cols = \"gray10\",         bg = \"white\",         boundary = 0,         size = 1     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"visualising-clustering-data","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.5 Visualising clustering data","title":"Data Maps","text":"One likely uses add_osm_groups visualise statistical clusters. Clustering algorithms generally produce membership lists may mapped onto spatial locations. cluster can defined matrix points single list groups. general approach illustrated groups defined single, randomly generated points. (last line just transforms row matrix list item.) generated points, map corresponding clusters can generated following simple code.  Although individual groups generally defined collections multiple points, example illustrates can also defined single points. cases, bg option course absent, remaining points allocated nearest groups. map also illustrates kind visual mess may arise attempts specify colours, particularly sequence colours passed add_osm_groups generally map particular spatial order, even pleasing colour scheme submitted, results may still less desirable. Although may possible devise pleasing schemes small numbers groups, manually defined colour schemes likely become impractical larger numbers groups.  Note submitting positive values additional border_width argument causes add_osm_groups drawn convex hull borders around different groups. Even sufficient, however, render result particularly visually pleasing intelligible. overcome , add_osm_groups includes option described following section generate spatially sensible colour schemes colouring distinct groups.","code":"set.seed (2) ngroups <- 12 x <- bbox [1, 1] + runif (ngroups) * diff (bbox [1, ]) y <- bbox [2, 1] + runif (ngroups) * diff (bbox [2, ]) groups <- as.list (data.frame (t (cbind (x, y)))) osm_basemap (     bbox = bbox,     bg = \"gray95\" ) %>%     add_osm_groups (dat_B,         groups = groups,         cols = rainbow (length (groups))     ) %>%     print_osm_map () osm_basemap (     bbox = bbox,     bg = \"gray95\" ) %>%     add_osm_groups (dat_B,         groups = groups,         border_width = 2,         cols = heat.colors (length (groups))     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"the-colour-matrix-colouring-several-regions","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.6 The Colour Matrix: Colouring Several Regions","title":"Data Maps","text":"additional argument may passed add_osm_groups colmat, abbreviation ‘colour matrix’. set true (default FALSE), group colours specified function colour_mat. function takes vector four colours input, wraps around four corners rectangular grid, spatially interpolates chromatically regular grid corners. visual different schemes, plot argument:  grid illustrates default colours, rainbow (4). two-dimensional colour field produced colour_mat may also rotated specified number degrees using rotate argument.  example also illustrates size colour matrices may also arbitrarily specified. Using colmat option add_osm_groups enables previous maps redrawn like :  Note add_osm_groups called colmat = TRUE, cols need length 4, specify four corners colour matrix, also rotate argument can submitted add_osm_groups passed colour_mat.","code":"cmat <- colour_mat (rainbow (4), plot = TRUE) cmat <- colour_mat (rainbow (4), n = c (4, 8), rotate = 90, plot = TRUE) osm_basemap (     bbox = bbox,     bg = \"gray95\" ) %>%     add_osm_groups (dat_B,         groups = groups,         border_width = 2,         colmat = TRUE,         cols = c (\"red\", \"green\", \"yellow\", \"blue\"),         rotate = 180     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"bounding-areas-within-named-highways","dir":"Articles","previous_headings":"1. Categorical data: add_osm_groups","what":"1.7 Bounding areas within named highways","title":"Data Maps","text":"explained first vignette, Basic maps, function connect_highways takes list OSM highway names bounding box, returns boundary polygon encircling named highways. can used highlight selected regions simply naming highways encircle , producing maps look like : Note use regex character ? first list highway names, denoting previous character optional. necessary OSM sections named “Shorts Gardens” “Short’s Gardens”. connect_highways returns list SpatialPoints representing shortest path sequentially connects listed highways. (Connecting listed highways may necessarily possible, case warnings issued. described first vignette, Basic maps, connect_highways also plot option allowing problematic cases visually inspected hopefully corrected.) lists highway coordinates can used highlight areas encircle. First group highways establish colour scheme map: plot map.  encircling highways included london data provided osmplotr.","code":"highways <- c (     \"Monmouth.St\", \"Short.?s.Gardens\", \"Endell.St\", \"Long.Acre\",     \"Upper.Saint.Martin\" ) highways1 <- connect_highways (highways = highways, bbox = bbox) highways <- c (\"Endell.St\", \"High.Holborn\", \"Drury.Lane\", \"Long.Acre\") highways2 <- connect_highways (highways = highways, bbox = bbox) highways <- c (\"Drury.Lane\", \"High.Holborn\", \"Kingsway\", \"Great.Queen.St\") highways3 <- connect_highways (highways = highways, bbox = bbox) class (highways1) ## [1] \"matrix\" \"array\" nrow (highways1) ## [1] 41 nrow (highways2) ## [1] 33 nrow (highways3) ## [1] 53 groups <- list (highways1, highways2, highways3) cols_B <- c (\"red\", \"orange\", \"tomato\") # for the 3 groups cols_H <- adjust_colours (cols_B, -0.2) bg_B <- \"gray40\" bg_H <- \"gray60\" osm_basemap (bbox = bbox, bg = \"gray20\") %>%     add_osm_objects (dat_P,         col = col_park_out     ) %>%     add_osm_groups (dat_B,         groups = groups,         boundary = 1,         bg = bg_B,         cols = cols_B     ) %>%     add_osm_groups (dat_H,         groups = groups,         boundary = 1,         bg = bg_H,         cols = cols_H     ) %>%     add_osm_groups (dat_HP,         groups = groups,         boundary = 0,         cols = cols_H,         bg = bg_H,         size = 1     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"continuous-data-add_osm_surface","dir":"Articles","previous_headings":"","what":"2. Continuous data: add_osm_surface","title":"Data Maps","text":"add_osm_surface function enables continuous data surface overlaid map. User-provided data spatially interpolated across map region OSM items coloured according specified continuous colour gradient. data must provided data frame three columns, ‘(x,y,z)’, ‘(x,y)’ coordinates points data given, ‘z’ values spatially interpolated across map. simple data frame can constructed passed add_osm_surface  present, add_osm_surface generates warning applied one kind Spatial object (polygons lines), illustrated following code (dat_H dat_HP class SpatialLinesDataFrame: add_osm_surface creates new ggplot2 aesthetic schemes kind object, schemes intended modified replaced within single plot. map may still printed, warning means last provided colour scheme applied objects class. means osmplotr can overlay two distinct colour schemes: one objects class SpatialLines, potentially different one objects class SpatialPolygons. course, number additional objects may overlaid add_osm_objects, example,","code":"n <- 5 x <- seq (bbox [1, 1], bbox [1, 2], length.out = n) y <- seq (bbox [2, 1], bbox [2, 2], length.out = n) dat <- data.frame (     x = as.vector (array (x, dim = c (n, n))),     y = as.vector (t (array (y, dim = c (n, n)))),     z = x * y ) head (dat) ##        x       y         z ## 1 -0.130 51.5100 -6.696300 ## 2 -0.125 51.5100 -6.439063 ## 3 -0.120 51.5100 -6.181800 ## 4 -0.115 51.5100 -5.924512 ## 5 -0.110 51.5100 -5.667200 ## 6 -0.130 51.5125 -6.696300 osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_surface (dat_B,         dat = dat,         cols = heat.colors (30)     ) %>%     print_osm_map () osm_basemap (bbox = bbox, bg = \"gray20\") %>%     add_osm_surface (dat_HP,         dat = dat,         cols = heat.colors (30)     ) %>%     add_osm_surface (dat_H,         dat = dat,         cols = heat.colors (30)     ) cols_adj <- adjust_colours (heat.colors (30), -0.2)  map <- osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_surface (dat_B,         dat = dat,         cols = heat.colors (30)     ) %>%     add_osm_surface (dat_HP,         dat = dat,         cols = cols_adj,         size = 1.5     ) %>%     add_osm_objects (dat_P,         col = rgb (0.1, 0.3, 0.1)     ) %>%     add_osm_objects (dat_H,         col = \"gray60\"     )  map %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"colourbar-legends-for-data-surfaces","dir":"Articles","previous_headings":"2. Continuous data: add_osm_surface","what":"2.1 Colourbar legends for data surfaces","title":"Data Maps","text":"colourbar legend surface may added add_colourbar. add_axes, function provided separately allow colourbars overlaid desired map items added. parameters required add_colourbar limits data (zlims) colours (along map, modified version returned).  Note colours submitted add_colourbar need used plot surface. (Although using different colours rarely likely useful.) add_axes, explained first vignette, Basic maps, transparency boxes surrounding elements colourbar may controlled specifying value alpha. alignment position may also adjusted, illustrated example.  barwidth barlength can specified terms one two numbers. single value barwidth determines relative width (0-1) border (right side vertical = TRUE top vertical = FALSE), two values determine relative start end positions sides bar. single value barlength produces bar given length centred middle map, two values determine respective upper lower points (vertical = TRUE) left right points (vertical = FALSE). example also demonstrates colours, sizes, font characteristics text labels can specified (text_col determining colour elements colourbar gradient ). Finally, add_axes, text labels colourbars currently able rotated ggplot2 permit rotation geom_label function used produce labels.","code":"map %>%     add_colourbar (         cols = terrain.colors (100),         zlims = range (dat$z)     ) %>%     print_osm_map () cols_adj <- adjust_colours (heat.colors (30), -0.2)  osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_surface (dat_B,         dat = dat,         cols = heat.colors (30)     ) %>%     add_osm_surface (dat_HP,         dat = dat,         cols = cols_adj,         size = 1.5     ) %>%     add_colourbar (         cols = heat.colors (100),         zlims = range (dat$z),         alpha = 0.9,         vertical = FALSE,         barwidth = c (0.1, 0.12),         barlength = c (0.5, 0.9),         text_col = \"blue\",         fontsize = 5,         fontface = 3,         fontfamily = \"Times\"     ) %>%     add_axes (         colour = \"blue\",         fontsize = 5,         fontface = 3,         fontfamily = \"Times\"     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"surfaces-and-data-perimeters","dir":"Articles","previous_headings":"2. Continuous data: add_osm_surface","what":"2.1 Surfaces and data perimeters","title":"Data Maps","text":"may often user-provided data extend across portion map, leaving perimeter beyond data boundary interpolation applied. add_osm_surface bg parameter specifying background colour objects beyond perimeter data surface. Passing parameter add_osm_surface causes objects beyond data perimeter coloured within ‘background’ colour. illustrate, trim data within circular range centre map. Remove dat rows translating d>0.01:  (perimeter irregular positions points dat.)","code":"d <- sqrt ((dat$x - mean (dat$x))^2 + (dat$y - mean (dat$y))^2) range (d) ## [1] 0.00000000 0.01118034 dat <- dat [which (d < 0.01), ] cols_adj <- adjust_colours (heat.colors (30), -0.2)  osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_surface (dat_B,         dat = dat,         cols = heat.colors (30),         bg = \"gray40\"     ) %>%     add_osm_surface (dat_HP,         dat = dat,         cols = cols_adj,         size = c (1.5, 0.5),         bg = \"gray70\"     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/data-maps.html","id":"further-control-of-surface-appearance","dir":"Articles","previous_headings":"2. Continuous data: add_osm_surface","what":"2.3 Further control of surface appearance","title":"Data Maps","text":"final add_osm_surface call code (dat_HP) illustrates additional parameters may passed control map appearance. case, two size parameters control size lines within data surface beyond perimeter. Single values may also passed, case determine width lines cases. One two shape parameters may also passed, also determining shapes SpatialPoints, illustrated next example, overlays trees map. lines points use ggplot2 colour gradient, adding second generates error means actual colour scheme determined final call add either lines points.  first two colour specifications (terrain.colors) ignored, added items coloured according final value heat.colors (30). aspects line sizes point shapes nevertheless respected.","code":"dat_T <- extract_osm_objects (key = \"tree\", bbox = bbox) osm_basemap (     bbox = bbox,     bg = \"gray20\" ) %>%     add_osm_surface (dat_HP,         dat = dat,         cols = terrain.colors (30),         size = c (1.5, 0.5),         bg = \"gray70\"     ) %>%     add_osm_surface (dat_H,         dat = dat,         cols = terrain.colors (30),         size = c (1, 0.5),         bg = \"gray70\"     ) %>%     add_osm_surface (dat_T,         dat = dat,         cols = heat.colors (30),         bg = \"lawngreen\",         size = c (3, 2),         shape = c (8, 1)     ) %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/maps-with-ocean.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1 Introduction","title":"Rendering Ocean","text":"may often desirable separately colour two portions map separated line object. directly possible polygons can filled colour, lines. osm_line2poly() function comes rescue converting line polygon surrounding given plotting region. classic example arises coastlines. always represented OpenStreetMap line objects, preventing ability simply colour land ocean separately. vignette illustrates general principles osm_line2poly() function, along several ancillary issues plotting coastal islands. Although functionality primarily developed coastlines mind, osm_line2poly() function designed sufficiently general manner readily adaptable cases line--polygon conversion may desirable. vignette explores example coastline around Greater Melbourne, Australia, first demonstrating extract coastline convert land sea polygons, demonstrating areas may delineated plot.","code":""},{"path":"https://docs.ropensci.org/osmplotr/articles/maps-with-ocean.html","id":"data-extraction-and-conversion","dir":"Articles","previous_headings":"","what":"2 Data Extraction and Conversion","title":"Rendering Ocean","text":"use osmdata extract coastline within bounding box Greater Melbourne. coastline object consists several types structure OpenStreetMap represents coastline line objects, coastline data contained within $osm_lines object. osm_line2poly() function can convert lines polygons can used plot filled areas. Note reflecting envisioned primary usage, function always returns objects named \"sea\", \"land\", \"islands\". usages coastline, names course reflect kinds object. \"islands\" item contains polygons separate originally queried. item list sf::data.frame object:","code":"library (osmplotr) library (osmdata) library (magrittr)  bbox <- osmdata::getbb (\"greater melbourne, australia\") coast <- opq (bbox = bbox) %>%     add_osm_feature (key = \"natural\", value = \"coastline\") %>%     osmdata_sf (quiet = FALSE) coast ## Object of class 'osmdata' with: ##                  $bbox : -38.49937,144.44405,-37.40175,146.1925 ##         $overpass_call : The call submitted to the overpass API ##             $timestamp : [ Thurs 5 Oct 2017 10:23:18 ] ##            $osm_points : 'sf' Simple Features Collection with 13635 points ##             $osm_lines : 'sf' Simple Features Collection with 73 linestrings ##          $osm_polygons : 'sf' Simple Features Collection with 12 polygons ##        $osm_multilines : 'sf' Simple Features Collection with 0 multilinestrings ##     $osm_multipolygons : 'sf' Simple Features Collection with 0 multipolygons coast_poly <- osm_line2poly (coast$osm_lines, bbox) names (coast_poly) ## [1] \"sea\"     \"land\"    \"islands\" class (coast_poly$sea) ## [1] \"sf\"         \"data.frame\""},{"path":"https://docs.ropensci.org/osmplotr/articles/maps-with-ocean.html","id":"plotting","dir":"Articles","previous_headings":"","what":"3 Plotting","title":"Rendering Ocean","text":"list items returned osm_line2poly() may used provide map background distinguishes ocean land. first colour entire map using background colour ocean, overlay land island polygons top .  gaudy colours differentiate source polygons. Purple islands returned original osm query, orange ones constructed fragments osm_line2poly.","code":"map <- osm_basemap (bbox = bbox, bg = \"cadetblue2\") %>%     add_osm_objects (coast_poly$land, col = \"lightyellow1\") %>%     add_osm_objects (coast_poly$islands, col = \"orange\") %>%     add_osm_objects (coast$osm_polygons, col = \"purple\", border = \"black\") %>%     add_osm_objects (coast$osm_lines, col = \"black\") %>%     print_osm_map ()"},{"path":"https://docs.ropensci.org/osmplotr/articles/maps-with-ocean.html","id":"further-demonstrations","dir":"Articles","previous_headings":"","what":"Further Demonstrations","title":"Rendering Ocean","text":"osm_line2poly() function works identifying lines extend least two points beyond given bounding box. coastline, OpenStreetMap designed land always lies left side direction line, enabling water land systematically distinguished. following test cases demonstrate reliability distinction. Fetch test data. variable name indicates coast enters bounding box western side exits east. land left following path.","code":"test_plot <- function (bbox) {     dat <- opq (bbox) %>%         add_osm_feature (key = \"natural\", value = \"coastline\") %>%         osmdata_sf (quiet = FALSE)     coast <- osm_line2poly (dat$osm_lines, bbox)     osm_basemap (bbox = bbox) %>%         add_osm_objects (coast$sea, col = \"cadetblue2\") %>%         add_osm_objects (coast$land, col = \"sienna2\") } bbWE <- get_bbox (c (142.116906, -38.352713, 142.205162, -38.409661)) coastWE <- getCoast (bbWE)  bbEW <- get_bbox (c (144.603127, -38.104003, 144.685557, -38.135596)) coastEW <- getCoast (bbEW)  bbNS <- get_bbox (c (143.807998, -39.770986, 143.906494, -39.918643)) coastNS <- getCoast (bbNS)  bbSN <- get_bbox (c (144.073544, -39.854586, 144.149318, -39.960047)) coastSN <- getCoast (bbSN)  bbWW <- get_bbox (c (144.904865, -37.858295, 144.923679, -37.874367)) coastWW <- getCoast (bbWW)  bbEE <- get_bbox (c (144.643383, -38.294671, 144.692197, -38.336022)) coastEE <- getCoast (bbEE)  bbNN <- get_bbox (c (145.856321, -38.831642, 146.050920, -38.914031)) coastNN <- getCoast (bbNN)  bbSS <- get_bbox (c (146.363768, -38.770345, 146.486389, -38.837287)) coastSS <- getCoast (bbSS)  bbEN <- get_bbox (c (144.738212, -38.337690, 144.758053, -38.346966)) coastEN <- getCoast (bbEN)  bbEWWS <- get_bbox (c (144.693077, -38.307526, 144.729113, -38.343997)) coastEWWS <- getCoast (bbEWWS)  bbWS <- get_bbox (c (143.164906, -38.704885, 143.2075563, -38.7462058)) coastWS <- getCoast (bbWS) testPlotPoly (coastWE, bbWE, \"testWE.png\") testPlotPoly (coastEW, bbEW, \"testEW.png\") testPlotPoly (coastNS, bbNS, \"testNS.png\") testPlotPoly (coastSN, bbSN, \"testSN.png\") testPlotPoly (coastWW, bbWW, \"testWW.png\") testPlotPoly (coastEE, bbEE, \"testEE.png\") testPlotPoly (coastNN, bbNN, \"testNN.png\") testPlotPoly (coastSS, bbSS, \"testSS.png\") testPlotPoly (coastEN, bbEN, \"testEN.png\") testPlotPoly (coastEWWS, bbEWWS, \"testEWWS.png\") testPlotPoly (coastWS, bbWS, \"testWS.png\")"},{"path":"https://docs.ropensci.org/osmplotr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Richard Beare. Author. Finkelstein Noam. Contributor, copyright holder.           Author included stub.R code Bartnik Lukasz. Contributor, copyright holder.           Author included stub.R code","code":""},{"path":"https://docs.ropensci.org/osmplotr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M, Beare R (2024). osmplotr: Bespoke Images 'OpenStreetMap' Data. R package version 0.3.5.006, https://github.com/ropensci/osmplotr, https://docs.ropensci.org/osmplotr/.","code":"@Manual{,   title = {osmplotr: Bespoke Images of 'OpenStreetMap' Data},   author = {Mark Padgham and Richard Beare},   year = {2024},   note = {R package version 0.3.5.006,     https://github.com/ropensci/osmplotr},   url = {https://docs.ropensci.org/osmplotr/}, }"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_1-quick-introduction","dir":"","previous_headings":"","what":"1. Quick Introduction","title":"Bespoke Images of OpenStreetMap Data","text":"first easy steps map making: Specify bounding box desired region Download desired data—case, building perimeters. Initiate osm_basemap desired background (bg) colour Overlay objects plot desired colour. Print map graphics device choice","code":"bbox <- get_bbox (c (-0.15, 51.5, -0.10, 51.52)) dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, dat_B, col = \"gray40\") print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_2-installation","dir":"","previous_headings":"","what":"2. Installation","title":"Bespoke Images of OpenStreetMap Data","text":"First install package development version load usual way","code":"install.packages (\"osmplotr\") devtools::install_github (\"ropensci/osmplotr\") library (osmplotr)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_3-a-simple-map","dir":"","previous_headings":"","what":"3. A Simple Map","title":"Bespoke Images of OpenStreetMap Data","text":"Simple maps can made overlaying different kinds OSM data different colours:","code":"dat_H <- extract_osm_objects (key = \"highway\", bbox = bbox) dat_P <- extract_osm_objects (key = \"park\", bbox = bbox) dat_G <- extract_osm_objects (key = \"landuse\", value = \"grass\", bbox = bbox) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, dat_B, col = \"gray40\") map <- add_osm_objects (map, dat_H, col = \"gray80\") map <- add_osm_objects (map, dat_P, col = \"darkseagreen\") map <- add_osm_objects (map, dat_G, col = \"darkseagreen1\") print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_4-highlighting-selected-areas","dir":"","previous_headings":"","what":"4. Highlighting Selected Areas","title":"Bespoke Images of OpenStreetMap Data","text":"osmplotr primarily intended data visualisation tool, particularly enabling selected regions highlighted. Regions can defined according simple point boundaries: OSM objects within defined regions can highlighted different colour schemes. cols defines colours group (one ), bg defines colour remaining, background area.  Note border = 0 argument last call divides park polygons precisely along border. map highlighted dark--light:","code":"pts <- sp::SpatialPoints (cbind (     c (-0.115, -0.13, -0.13, -0.115),     c (51.505, 51.505, 51.515, 51.515) )) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_groups (map, dat_B, groups = pts, cols = \"orange\", bg = \"gray40\") map <- add_osm_objects (map, london$dat_P, col = \"darkseagreen1\") map <- add_osm_groups (     map,     london$dat_P,     groups = pts,     cols = \"darkseagreen1\",     bg = \"darkseagreen\",     boundary = 0 ) print_osm_map (map) map <- osm_basemap (bbox = bbox, bg = \"gray95\") map <- add_osm_groups (map, dat_B, groups = pts, cols = \"gray40\", bg = \"gray85\") map <- add_osm_groups (map, dat_H, groups = pts, cols = \"gray20\", bg = \"gray70\") print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_5-highlighting-clusters","dir":"","previous_headings":"","what":"5. Highlighting Clusters","title":"Bespoke Images of OpenStreetMap Data","text":"add_osm_groups also enables plotting entire region group spatially distinct clusters defined colours. Groups can defined simple spatial points denoting centres: Calling add_osm_groups bg argument forces points lying outside defined groups allocated nearest groups, thus produces inclusive grouping extending across entire region.","code":"set.seed (2) ngroups <- 12 x <- bbox [1, 1] + runif (ngroups) * diff (bbox [1, ]) y <- bbox [2, 1] + runif (ngroups) * diff (bbox [2, ]) groups <- cbind (x, y) groups <- apply (groups, 1, function (i) {     sp::SpatialPoints (matrix (i, nrow = 1, ncol = 2)) }) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_groups (     map,     dat_B,     groups = groups,     cols = rainbow (length (groups)),     border_width = 2 ) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_6-highlighting-areas-bounded-by-named-highways","dir":"","previous_headings":"","what":"6. Highlighting Areas Bounded by Named Highways","title":"Bespoke Images of OpenStreetMap Data","text":"alternative way defining highlighted groups naming highways encircling desired regions. passing lists groups returned connect_highways add_osm_groups, time Wes Anderson flair.","code":"# These highways extend beyond the previous, smaller bbox bbox_big <- get_bbox (c (-0.15, 51.5, -0.10, 51.52)) highways <- c (     \"Davies.St\", \"Berkeley.Sq\", \"Berkeley.St\", \"Piccadilly\",     \"Regent.St\", \"Oxford.St\" ) highways1 <- connect_highways (highways = highways, bbox = bbox_big) highways <- c (\"Regent.St\", \"Oxford.St\", \"Shaftesbury\") highways2 <- connect_highways (highways = highways, bbox = bbox_big) highways <- c (     \"Piccadilly\", \"Shaftesbury.Ave\", \"Charing.Cross.R\",     \"Saint.Martin\", \"Trafalgar.Sq\", \"Cockspur.St\",     \"Pall.Mall\", \"St.James\" ) highways3 <- connect_highways (highways = highways, bbox = bbox_big) highways <- c (     \"Charing.Cross\", \"Duncannon.St\", \"Strand\", \"Aldwych\",     \"Kingsway\", \"High.Holborn\", \"Shaftesbury.Ave\" ) highways4 <- connect_highways (highways = highways, bbox = bbox_big) highways <- c (     \"Kingsway\", \"Holborn\", \"Farringdon.St\", \"Strand\",     \"Fleet.St\", \"Aldwych\" ) highways5 <- connect_highways (highways = highways, bbox = bbox_big) groups <- list (highways1, highways2, highways3, highways4, highways5) map <- osm_basemap (bbox = bbox, bg = \"gray20\") library (wesanderson) cols <- wes_palette (\"Darjeeling\", 5) map <- add_osm_groups (     map,     dat_B,     groups = groups,     boundary = 1,     cols = cols,     bg = \"gray40\",     colmat = FALSE ) map <- add_osm_groups (     map,     dat_H,     groups = groups,     boundary = 0,     cols = cols,     bg = \"gray70\",     colmat = FALSE ) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_7-data-surfaces","dir":"","previous_headings":"","what":"7. Data Surfaces","title":"Bespoke Images of OpenStreetMap Data","text":"Finally, osmplotr contains function add_osm_surface spatially interpolates given set spatial data points colours OSM objects according specified colour gradient. illustrated volcano data projected onto bbox.","code":"x <- seq (bbox [1, 1], bbox [1, 2], length.out = dim (volcano) [1]) y <- seq (bbox [2, 1], bbox [2, 2], length.out = dim (volcano) [2]) xy <- cbind (rep (x, dim (volcano) [2]), rep (y, each = dim (volcano) [1])) z <- as.numeric (volcano) dat <- data.frame (x = xy [, 1], y = xy [, 2], z = z) map <- osm_basemap (bbox = bbox, bg = \"gray20\") cols <- gray (0:50 / 50) map <- add_osm_surface (map, dat_B, dat = dat, cols = cols) # Darken cols by ~20% map <- add_osm_surface (     map,     dat_H,     dat = dat,     cols = adjust_colours (cols, -0.2) ) map <- add_colourbar (map, cols = cols, zlims = range (volcano)) map <- add_axes (map) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/index.html","id":"id_8-gallery","dir":"","previous_headings":"","what":"8. Gallery","title":"Bespoke Images of OpenStreetMap Data","text":"Got nice osmplotr map? Please contribute one following ways: Fork repo, add link README.md/.Rmd, send pull request; Open issue details; Send email address DESCRIPTION. See package vignettes (basic maps data maps) lot detail capabilities osmplotr. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"add_axes — add_axes","title":"add_axes — add_axes","text":"Adds axes internal region OSM plot.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_axes — add_axes","text":"","code":"add_axes(   map,   colour = \"black\",   pos = c(0.02, 0.03),   alpha = 0.4,   fontsize = 3,   fontface,   fontfamily,   ... )"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_axes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_axes — add_axes","text":"map ggplot2 object axes added. colour Colour axis (determines colour elements: lines, ticks, labels). pos Positions axes labels relative entire plot device. alpha alpha value semi-transparent background surrounding axes labels (lower values increase transparency). fontsize Size axis font (ggplot2 terms; default=3). fontface Fontface axis labels (1:4=plain,bold,italic,bold-italic). fontfamily Family axis font (example, `Times'). ... Mechanism allow many parameters passed alternative names (color colour xyz fontxyz.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_axes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_axes — add_axes","text":"Modified version map axes added.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/add_axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_axes — add_axes","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, london$dat_BNR, col = \"gray40\") map <- add_axes (map) print (map)   # Map items are added sequentially, so adding axes prior to objects will # produce a different result. map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_axes (map) map <- add_osm_objects (map, london$dat_BNR, col = \"gray40\") print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_colourbar.html","id":null,"dir":"Reference","previous_headings":"","what":"add_colorbar — add_colourbar","title":"add_colorbar — add_colourbar","text":"Adds colourbar existing map. Intended used combination add_osm_surface. present, plots right side map.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_colourbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_colorbar — add_colourbar","text":"","code":"add_colourbar(   map,   barwidth = 0.02,   barlength = 0.7,   zlims,   cols,   vertical = TRUE,   alpha = 0.4,   text_col = \"black\",   fontsize = 3,   fontface,   fontfamily,   ... )"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_colourbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_colorbar — add_colourbar","text":"map ggplot2 object colourbar added. barwidth Relative width bar (perpendicular direction), either single number giving distance right upper margin, two numbers giving left/right lower/upper limits. barlength Relative length bar (parallel direction), either single number giving total length centred bar, two numbers giving lower/upper left/right limits. zlims Vector (min,max) values scale colourbar. values returned add_osm_surface. cols Vector colours. vertical FALSE, colourbar aligned horizontally instead default vertical alignment. alpha Transparency level region immediately surrounding colourbar, including behind text. Lower values transparent. text_col Colour text, tick marks, lines colourbar. fontsize Size text labels (ggplot2 terms; default=3). fontface Fontface colourbar labels (1:4=plain,bold,italic,bold-italic). fontfamily Family colourbar font (example, `Times'). ... Mechanism allow many parameters passed alternative names (xyz fontxyz).","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_colourbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_colorbar — add_colourbar","text":"Modified version map colourbar added.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/add_colourbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_colorbar — add_colourbar","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) map <- osm_basemap (bbox = bbox, bg = \"gray20\") # Align volcano data to lat-lon range of bbox dv <- dim (volcano) x <- seq (bbox [1, 1], bbox [1, 2], length.out = dv [1]) y <- seq (bbox [2, 1], bbox [2, 2], length.out = dv [2]) dat <- data.frame (     x = rep (x, dv [2]),     y = rep (y, each = dv [1]),     z = as.numeric (volcano) ) map <- add_osm_surface (map,     obj = london$dat_BNR, dat = dat,     cols = heat.colors (30) ) map <- add_axes (map) # Note colours of colourbar can be artibrarily set, and need not equal those # passed to 'add_osm_surface' map <- add_colourbar (map,     zlims = range (volcano), cols = heat.colors (100),     text_col = \"black\" ) print_osm_map (map)  # Horizontal colourbar shifted away from margins: map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_surface (map,     obj = london$dat_BNR, dat = dat,     cols = heat.colors (30) ) map <- add_colourbar (map,     zlims = range (volcano), cols = heat.colors (100),     barwidth = c (0.1, 0.15), barlength = c (0.5, 0.9),     vertical = FALSE ) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"add_osm_groups — add_osm_groups","title":"add_osm_groups — add_osm_groups","text":"Plots spatially distinct groups OSM objects different colours.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_osm_groups — add_osm_groups","text":"","code":"add_osm_groups(   map,   obj,   groups,   cols,   bg,   make_hull = FALSE,   boundary = -1,   size,   shape,   border_width = 1,   colmat,   rotate )"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_osm_groups — add_osm_groups","text":"map ggplot2 object grouped objects added. obj sp SpatialPointsDataFrame, SpatialPolygonsDataFrame, SpatialLinesDataFrame (list polygons lines) returned extract_osm_objects. groups list spatial points objects, contains coordinates points defining one group. cols Either vector >= 4 colours passed colour_mat (colmat = TRUE) arrange 2-D map visually distinct colours (default uses rainbow colours), (colmat = FALSE), vector length groups specifying individual colours . bg given, objects within groups coloured colour, otherwise (given) assigned nearest group coloured accordingly (boundary effect latter case). make_hull Either single boolean value vector length groups specifying whether convex hulls constructed around groups (TRUE), whether group already defines hull (convex otherwise; FALSE). boundary (negative, 0, positive) values define whether boundary groups (exclude, bisect, include) objects straddle precise boundary. (effect bg given). size Linewidth argument passed ggplot2 (polygon, path, point) functions: determines width lines (polygon, line), sizes points.  Respective defaults (0, 0.5, 0.5). shape Shape points lines (latter passed linetype); see shape. border_width given, draws convex hull borders around entire groups colours groups (try values around 1-2). colmat TRUE generates colours according colour_mat, otherwise colours groups specified directly vector cols. rotate Passed colour_mat rotate colours specified number degrees clockwise.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_osm_groups — add_osm_groups","text":"Modified version map groups added.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_groups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"add_osm_groups — add_osm_groups","text":"group entirely contained within group assumed represent hole, points internal smaller contained group *excluded* group, outside smaller yet inside bigger group included.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_osm_groups — add_osm_groups","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) # Download data using 'extract_osm_objects' if (FALSE) { # \\dontrun{ dat_HP <- extract_osm_objects (     key = \"highway\",     value = \"primary\",     bbox = bbox ) dat_T <- extract_osm_objects (key = \"tree\", bbox = bbox) dat_BNR <- extract_osm_objects (     key = \"building\", value = \"!residential\",     bbox = bbox ) } # } # These data are also provided in dat_HP <- london$dat_HP dat_T <- london$dat_T dat_BNR <- london$dat_BNR  # Define a function to easily generate a basemap bmap <- function () {     map <- osm_basemap (bbox = bbox, bg = \"gray20\")     map <- add_osm_objects (map, dat_HP, col = \"gray70\", size = 1)     add_osm_objects (map, dat_T, col = \"green\") }  # Highlight a single region using all objects lying partially inside the # boundary (via the boundary = 1 argument) pts <- sp::SpatialPoints (cbind (     c (-0.115, -0.125, -0.125, -0.115),     c (51.505, 51.505, 51.515, 51.515) )) if (FALSE) { # \\dontrun{ dat_H <- extract_osm_objects (key = \"highway\", bbox = bbox) # all highways map <- bmap () map <- add_osm_groups (map, dat_BNR,     groups = pts, cols = \"gray90\",     bg = \"gray40\", boundary = 1 ) map <- add_osm_groups (map, dat_H,     groups = pts, cols = \"gray80\",     bg = \"gray30\", boundary = 1 ) print_osm_map (map) } # }  # Generate random points to serve as group centres set.seed (2) ngroups <- 6 x <- bbox [1, 1] + runif (ngroups) * diff (bbox [1, ]) y <- bbox [2, 1] + runif (ngroups) * diff (bbox [2, ]) groups <- cbind (x, y) groups <- apply (groups, 1, function (i) {     sp::SpatialPoints (         matrix (i, nrow = 1, ncol = 2)     ) }) # plot a basemap and add groups map <- bmap () cols <- rainbow (length (groups)) if (FALSE) { # \\dontrun{ map <- add_osm_groups (     map,     obj = london$dat_BNR,     group = groups,     cols = cols ) cols <- adjust_colours (cols, -0.2) map <- add_osm_groups (map, obj = london$dat_H, groups = groups, cols = cols) print_osm_map (map)  # Highlight convex hulls containing groups: map <- bmap () map <- add_osm_groups (     map,     obj = london$dat_BNR,     group = groups,     cols = cols,     border_width = 2 ) print_osm_map (map) } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"add_osm_objects — add_osm_objects","title":"add_osm_objects — add_osm_objects","text":"Adds layers spatial objects (polygons, lines, points generated extract_osm_objects) graphics object initialised osm_basemap.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_osm_objects — add_osm_objects","text":"","code":"add_osm_objects(map, obj, col = \"gray40\", border = NA, hcol, size, shape)"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_osm_objects — add_osm_objects","text":"map ggplot2 object objects added. obj spatial (sp) data frame polygons, lines, points, typically returned extract_osm_objects. col Colour lines points; fill colour polygons. border Border colour polygons. hcol (Multipolygons ) Vector fill colours holes size Linewidth argument passed ggplot2 (polygon, path, point) functions: determines width lines (polygon, line), sizes points.  Respective defaults (0, 0.5, 0.5). shape Shape points lines (latter passed linetype); see shape.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_osm_objects — add_osm_objects","text":"modified version map objects added.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_osm_objects — add_osm_objects","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) map <- osm_basemap (bbox = bbox, bg = \"gray20\")  if (FALSE) { # \\dontrun{ # The 'london' data used below were downloaded as: dat_BNR <- extract_osm_objects (     bbox = bbox,     key = \"building\",     value = \"!residential\" ) dat_HP <- extract_osm_objects (     bbox = bbox,     key = \"highway\",     value = \"primary\" ) dat_T <- extract_osm_objects (bbox = bbox, key = \"tree\") } # } map <- add_osm_objects (     map,     obj = london$dat_BNR,     col = \"gray40\",     border = \"yellow\" ) map <- add_osm_objects (     map,     obj = london$dat_HP,     col = \"gray80\",     size = 1, shape = 2 ) map <- add_osm_objects (     map,     london$dat_T,     col = \"green\",     size = 2, shape = 1 ) print_osm_map (map)  # Polygons with different coloured borders map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, obj = london$dat_HP, col = \"gray80\") map <- add_osm_objects (map, london$dat_T, col = \"green\") map <- add_osm_objects (map,     obj = london$dat_BNR, col = \"gray40\",     border = \"yellow\", size = 0.5 ) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"add_osm_surface — add_osm_surface","title":"add_osm_surface — add_osm_surface","text":"Adds colour-coded surface spatial objects (polygons, lines, points generated extract_osm_objects graphics object initialised osm_basemap. surface spatially interpolated values given dat, matrix data.frame 3 columns (x, y, z), (x,y) (longitude, latitude), z values interpolated. Interpolation uses spatstat.explore::Smooth.ppp, applies Gaussian kernel smoother optimised given data, effectively non-parametric.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_osm_surface — add_osm_surface","text":"","code":"add_osm_surface(   map,   obj,   dat,   method = \"idw\",   grid_size = 100,   cols = heat.colors(30),   bg,   size,   shape )"},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_osm_surface — add_osm_surface","text":"map ggplot2 object surface added obj sp SpatialPolygonsDataFrame SpatialLinesDataFrame (list polygons lines) returned extract_osm_objects dat matrix data frame 3 columns (x, y, z), (x, y) (longitude, latitude), z values interpolated method Either idw (Inverse Distance Weighting spatstat.explore::idw; default), Gaussian kernel smoothing (spatstat.explore::Smooth.ppp), value avoid interpolation. case, dat must regularly spaced x y. grid_size size interpolation grid cols Vector colours shading z-values (example, terrain.colors (30)) bg specified, OSM objects outside convex hull surrounding dat plotted colour, otherwise included interpolation (generally inaccurate peripheral values) size Size argument passed ggplot2 (polygon, path, point) functions: determines width lines (polygon, line), sizes points.  Respective defaults (0, 0.5, 0.5). bg provided size 2 elements, second determines size background objects. shape Shape lines points, details see ?ggplot::shape. bg provided shape 2 elements, second determines shape background objects.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_osm_surface — add_osm_surface","text":"modified version map surface added","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_surface.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"add_osm_surface — add_osm_surface","text":"Points beyond spatial boundary dat included surface bg given. cases, values points may exceed range provided data surface extrapolated beyond domain.  Actual plotted values therefore restricted range given values, extrapolated points greater less range dat simply set respective maximum minimum values. allows limits dat used precisely adding colourbars add_colourbar.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/add_osm_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_osm_surface — add_osm_surface","text":"","code":"# Get some data bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) # dat_B <- extract_osm_objects (key = 'building', bbox = bbox) # These data are also provided in dat_B <- london$dat_BNR # actuall non-residential buildings # Make a data surface across the map coordinates, and remove periphery n <- 5 x <- seq (bbox [1, 1], bbox [1, 2], length.out = n) y <- seq (bbox [2, 1], bbox [2, 2], length.out = n) dat <- data.frame (     x = as.vector (array (x, dim = c (n, n))),     y = as.vector (t (array (y, dim = c (n, n)))),     z = x * y ) if (FALSE) { # \\dontrun{ map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_surface (map, dat_B, dat = dat, cols = heat.colors (30)) print_osm_map (map) } # }  # If data do not cover the entire map region, then the peripheral remainder # can be plotted by specifying the 'bg' colour. First remove periphery from # 'dat': d <- sqrt ((dat$x - mean (dat$x))^2 + (dat$y - mean (dat$y))^2) dat <- dat [which (d < 0.01), ] if (FALSE) { # \\dontrun{ map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_surface (     map,     dat_B,     dat = dat,     cols = heat.colors (30),     bg = \"gray40\" ) print_osm_map (map) } # }  # Polygons and (lines/points) can be overlaid as data surfaces with different # colour schemes. # dat_HP <- extract_osm_objects (key = 'highway', #                                value = 'primary', #                                bbox = bbox) # These data are also provided in dat_HP <- london$dat_HP cols <- adjust_colours (heat.colors (30), adj = -0.2) # darken by 20% if (FALSE) { # \\dontrun{ map <- add_osm_surface (     map,     dat_HP,     dat,     cols = cols,     bg = \"gray60\",     size = c (1.5, 0.5) ) print_osm_map (map) } # }  # Adding multiple surfaces of either polygons or (lines/points) produces a # 'ggplot2' warning, and forces the colour gradient to revert to the last # given value. dat_T <- london$dat_T # trees if (FALSE) { # \\dontrun{ map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_surface (     map,     dat_B,     dat = dat,     cols = heat.colors (30),     bg = \"gray40\" ) map <- add_osm_surface (     map,     dat_HP,     dat,     cols = heat.colors (30),     bg = \"gray60\",     size = c (1.5, 0.5) ) map <- add_osm_surface (     map,     dat_T,     dat,     cols = topo.colors (30),     bg = \"gray70\",     size = c (5, 2),     shape = c (8, 1) ) print_osm_map (map) # 'dat_HP' is in 'topo.colors' not 'heat.colors' } # }  # Add axes and colourbar if (FALSE) { # \\dontrun{ map <- add_axes (map) map <- add_colourbar (     map,     cols = heat.colors (100),     zlims = range (dat$z),     barwidth = c (0.02),     barlength = c (0.6, 0.99),     vertical = TRUE ) print_osm_map (map) } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/adjust_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"adjust_colours — adjust_colours","title":"adjust_colours — adjust_colours","text":"Adjusts given colour lightening darkening specified amount (relative scale -1 1).  Adjustments made RGB space, limitations see ?convertColor","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/adjust_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adjust_colours — adjust_colours","text":"","code":"adjust_colours(cols, adj = 0, plot = FALSE)"},{"path":"https://docs.ropensci.org/osmplotr/reference/adjust_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adjust_colours — adjust_colours","text":"cols vector R colours (allowable formats , see ?col2rgb). adj number -1 1 determining much lighten (positive values) darken (negative values) colours. plot TRUE, generates plot allow visual comparison original adjusted colours.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/adjust_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adjust_colours — adjust_colours","text":"Corresponding vector adjusted colours (hexadecimal strings).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/adjust_colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adjust_colours — adjust_colours","text":"","code":"cols <- adjust_colours (cols = heat.colors (10), adj = -0.2, plot = TRUE)    # 'adjust_colours' also offers an easy way to adjust the default colour # schemes provided by 'osm_structures'. The following lines darken the # highway colour of the 'light' colour scheme by 20% structures <- osm_structures (     structures = c (\"building\", \"highway\", \"park\"),     col_scheme = \"light\" ) structures$cols [2] <- adjust_colours (structures$cols [2], adj = -0.2) # Plot these structures: bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) if (FALSE) { # \\dontrun{ dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) dat_H <- extract_osm_objects (key = \"highway\", bbox = bbox) dat_P <- extract_osm_objects (key = \"park\", bbox = bbox) } # } # These data are also included in the 'london' data of 'osmplotr' osm_data <- list (     dat_B = london$dat_BNR,     dat_H = london$dat_HP,     dat_P = london$dat_P ) dat <- make_osm_map (     structures = structures,     osm_data = osm_data,     bbox = bbox ) print_osm_map (dat$map)"},{"path":"https://docs.ropensci.org/osmplotr/reference/colour_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"colour_mat — colour_mat","title":"colour_mat — colour_mat","text":"Generates 2D matrix graduated colours interpolating given colours specifying four corners.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/colour_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colour_mat — colour_mat","text":"","code":"colour_mat(cols, n = c(10, 10), rotate = NULL, plot = FALSE)"},{"path":"https://docs.ropensci.org/osmplotr/reference/colour_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colour_mat — colour_mat","text":"cols vector length >= 4 colors (example, default = rainbow (4), RColorBrewer::brewer.pal (4, 'Set1')). cols wrapped clockwise around corners top left bottom left. n number rows columns colour matrix (default = 10; length 2, dimensions rectangle). rotate rotates entire colour matrix specified angle (degrees). plot plots colour matrix.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/colour_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colour_mat — colour_mat","text":"Matrix colours.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/colour_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"colour_mat — colour_mat","text":"","code":"cm <- colour_mat (n = 5, cols = rainbow (4), rotate = 90, plot = TRUE)    # 'colour_mat' is intended primarily for use in colouring groups added with # 'add_osm_groups' using the 'colmat = TRUE' option: bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) # Generate random points to serve as group centres set.seed (2) ngroups <- 6 x <- bbox [1, 1] + runif (ngroups) * diff (bbox [1, ]) y <- bbox [2, 1] + runif (ngroups) * diff (bbox [2, ]) groups <- cbind (x, y) groups <- apply (groups, 1, function (i) {     sp::SpatialPoints (matrix (i, nrow = 1, ncol = 2)) }) # plot a basemap and add groups map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_groups (map,     obj = london$dat_BNR, group = groups,     cols = rainbow (4), colmat = TRUE, rotate = 90 ) print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/reference/connect_highways.html","id":null,"dir":"Reference","previous_headings":"","what":"connect_highways — connect_highways","title":"connect_highways — connect_highways","text":"Takes list highways names must enclose internal area, returns SpatialLines object containing sequence OSM nodes cyclically connect highways. fail streets form cycle.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/connect_highways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connect_highways — connect_highways","text":"","code":"connect_highways(highways, bbox, plot = FALSE)"},{"path":"https://docs.ropensci.org/osmplotr/reference/connect_highways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connect_highways — connect_highways","text":"highways vector highway names passed directly Overpass API. Wildcards whitespaces `.'; options see online help overpass API. bbox bounding box map.  2--2 matrix 4 elements columns min max values, rows x y values. plot TRUE, OSM data highway plotted final cycle overlaid.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/connect_highways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"connect_highways — connect_highways","text":"single set SpatialPoints containing lat-lon coordinates cyclic line connecting given streets.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/connect_highways.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"connect_highways — connect_highways","text":"connect_highways primarily intended provide means define boundaries groups can highlighted using add_osm_groups. function can guaranteed failsafe owing inherently unpredictable nature OpenStreetMap, well unknown relationships named highways. plot option enables problematic cases examined hopefully resolved.  function still experimental, please help improvements reporting problems!","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/connect_highways.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"connect_highways — connect_highways","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) if (FALSE) { # \\dontrun{ highways <- c (     \"Monmouth.St\", \"Short.?s.Gardens\", \"Endell.St\", \"Long.Acre\",     \"Upper.Saint.Martin\" ) # Note that dots signify \"anything\", including whitespace and apostrophes, # and that '?' denotes optional previous character and so here matches # both \"Shorts Gardens\" and \"Short's Gardens\" highways1 <- connect_highways (highways = highways, bbox = bbox, plot = TRUE) highways <- c (\"Endell.St\", \"High.Holborn\", \"Drury.Lane\", \"Long.Acre\") highways2 <- connect_highways (highways = highways, bbox = bbox, plot = TRUE)  # Use of 'connect_highways' to highlight a region on a map map <- osm_basemap (bbox = bbox, bg = \"gray20\") # dat_B <- extract_osm_data (key = \"building\", #                            value = \"!residential\", #                            bbox = bbox) # Those data are part of 'osmplotr': dat_BNR <- london$dat_BNR # Non-residential buildings groups <- list (highways1, highways2) map <- add_osm_groups (map,     obj = dat_BNR, groups = groups,     cols = c (\"red\", \"blue\"), bg = \"gray40\" ) print_osm_map (map) } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/extract_osm_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_osm_objects — extract_osm_objects","title":"extract_osm_objects — extract_osm_objects","text":"Downloads OSM XML objects converts sp objects (SpatialPointsDataFrame, SpatialLinesDataFrame, SpatialPolygonsDataFrame).","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/extract_osm_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_osm_objects — extract_osm_objects","text":"","code":"extract_osm_objects(   bbox,   key = NULL,   value,   extra_pairs,   return_type,   sf = TRUE,   geom_only = FALSE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/osmplotr/reference/extract_osm_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_osm_objects — extract_osm_objects","text":"bbox bounding box within key-value objects downloaded.  2--2 matrix 4 elements columns min max values, rows x y values. key OSM key search . Useful keys include building, waterway, natural, grass, park, amenity, shop, boundary, highway. Others passed directly overpass API may necessarily return results. value OSM value match key. NULL, keys returned.  Negation specified !value. extra_pairs list additional key-value pairs passed overpass API. return_type specified, force return spatial (point, line, polygon, multiline, multipolygon) objects. return_type = 'line' , example, always return SpatialLinesDataFrame. specified, defaults 'sensible' values (example, lines highways, points trees, polygons buildings). sf TRUE, return Simple Features (sf) objects; otherwise Spatial (sp) objects. geom_only TRUE, return OSM data describing geometric object; otherwise return data describing object. quiet FALSE, provides notification progress.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/extract_osm_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_osm_objects — extract_osm_objects","text":"Either SpatialPointsDataFrame, SpatialLinesDataFrame, SpatialPolygonsDataFrame.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/extract_osm_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract_osm_objects — extract_osm_objects","text":"","code":"if (FALSE) { # \\dontrun{ bbox <- get_bbox (c (-0.13, 51.50, -0.11, 51.52)) dat_B <- extract_osm_objects (key = \"building\", bbox = bbox) dat_H <- extract_osm_objects (key = \"highway\", bbox = bbox) dat_BR <- extract_osm_objects (     key = \"building\",     value = \"residential\",     bbox = bbox ) dat_HP <- extract_osm_objects (     key = \"highway\",     value = \"primary\",     bbox = bbox ) dat_HNP <- extract_osm_objects (     key = \"highway\",     value = \"!primary\",     bbox = bbox ) extra_pairs <- c (\"name\", \"Royal.Festival.Hall\") dat <- extract_osm_objects (     key = \"building\", extra_pairs = extra_pairs,     bbox = bbox ) } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/get_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"get_bbox — get_bbox","title":"get_bbox — get_bbox","text":"Converts string latitudes longitudes square matrix passed bbox argument (extract_osm_objects, osm_basemap, make_osm_map).","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/get_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_bbox — get_bbox","text":"","code":"get_bbox(latlon)"},{"path":"https://docs.ropensci.org/osmplotr/reference/get_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_bbox — get_bbox","text":"latlon vector (longitude, latitude, longitude, latitude) values.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/get_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_bbox — get_bbox","text":"2--2 matrix 4 elements columns min max values, rows x y values.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/get_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_bbox — get_bbox","text":"","code":"bbox <- get_bbox (c (-0.15, 51.5, -0.1, 51.52))"},{"path":"https://docs.ropensci.org/osmplotr/reference/london.html","id":null,"dir":"Reference","previous_headings":"","what":"london — london","title":"london — london","text":"list Simple Features (sf) data.frame objects containing OpenStreetMap polygons, lines, points various OpenStreetMap structures small part central London, U.K.  (bbox = -0.13, 51.51, -0.11, 51.52). list includes: dat_H: 974 non-primary highways linestrings dat_HP: 159 primary highways linestrings dat_BNR: 1,716 non-residential buildings polygons dat_BR: 43 residential buildings polygons dat_BC: 67 commerical buildings polygons dat_A: 372 amenities polygons dat_P: 13 parks polygons dat_T: 688 trees points dat_RFH: 1 polygon representing Royal Festival Hall dat_ST: 1 polygon representing 150 Stamford Street","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/london.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"london — london","text":"list spatial objects","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/london.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"london — london","text":"vignette basic-maps details data downloaded. Note internal versions descriptive data removed names, geometries, OSM identification numbers.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/make_osm_map.html","id":null,"dir":"Reference","previous_headings":"","what":"make_osm_map — make_osm_map","title":"make_osm_map — make_osm_map","text":"Makes entire OSM map given bbox using submitted data, downloading data none submitted. convenience function enabling entire map produced according graphical format specified structures argument.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/make_osm_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_osm_map — make_osm_map","text":"","code":"make_osm_map(   bbox,   osm_data,   structures = osm_structures(),   dat_prefix = \"dat_\" )"},{"path":"https://docs.ropensci.org/osmplotr/reference/make_osm_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_osm_map — make_osm_map","text":"bbox bounding box map.  2--2 matrix 4 elements columns min max values, rows x y values.  NULL, bbox taken largest extent OSM objects osm_data. osm_data list OSM objects returned extract_osm_objects.  objects may included plot without downloading. named stated dat_prefix suffixes given structures. structures data.frame specifying types OSM structures returned osm_structures, potentially modified alter lists structures plotted, associated colours. Objects overlaid plot according order given structures. dat_prefix Prefix data structures (default dat_). Final data structures created appending suffixes osm_structures.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/make_osm_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make_osm_map — make_osm_map","text":"List two components: List OSM structures      Spatial(Points/Lines/Polygons)DataFrame appended      osm_data (NULL default), map ggplot2 object","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/make_osm_map.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"make_osm_map — make_osm_map","text":"osm_data given, data downloaded, can take time.  Progress dumped screen.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/make_osm_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_osm_map — make_osm_map","text":"","code":"structures <- c (\"highway\", \"park\") structs <- osm_structures (structures = structures, col_scheme = \"light\") # make_osm_map returns potentially modified list of data using the provided # 'london' data for highways and parks. dat <- make_osm_map (osm_data = london, structures = structs) # or download data automatically using a defined bounding boox bbox <- get_bbox (c (-0.15, 51.5, -0.10, 51.52)) if (FALSE) { # \\dontrun{ dat <- make_osm_map (bbox = bbox, structures = structs) print_osm_map (dat$map) } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_basemap.html","id":null,"dir":"Reference","previous_headings":"","what":"osm_basemap — osm_basemap","title":"osm_basemap — osm_basemap","text":"Generates base OSM plot ready polygon, line, point objects overlain add_osm_objects.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_basemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osm_basemap — osm_basemap","text":"","code":"osm_basemap(bbox, structures, bg = \"gray20\")"},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_basemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osm_basemap — osm_basemap","text":"bbox bounding box (Latitude-longitude range) plotted.  2--2 matrix 4 elements columns min max values, rows x y values. Can also object class sf, example returned extract_osm_objects osmdata package, case bounding box extracted object coordinates. structures Data frame returned osm_structures used specify background colour plot; missing, colour specified bg. bg Background colour map (default = gray20) structs given).","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_basemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"osm_basemap — osm_basemap","text":"ggplot2 object containing base map.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_basemap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"osm_basemap — osm_basemap","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, london$dat_BNR, col = \"gray40\") print_osm_map (map)"},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_line2poly.html","id":null,"dir":"Reference","previous_headings":"","what":"osm_line2poly — osm_line2poly","title":"osm_line2poly — osm_line2poly","text":"Converts sf::sfc_LINSTRING objects polygons connecting end points around given bounding box. particularly useful plotting water land delineated coastlines. Coastlines OpenStreetMap lines, polygons, directly way plot ocean water distinct land. function enables connecting end points coastline LINESTRING objects form closed polygons.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_line2poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osm_line2poly — osm_line2poly","text":"","code":"osm_line2poly(obj, bbox)"},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_line2poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osm_line2poly — osm_line2poly","text":"obj Simple Features (sf) data frame lines, typically returned extract_osm_objects, osmdata::osmdata_sf. bbox bounding box (Latitude-longitude range) plotted.  2--2 matrix 4 elements columns min max values, rows x y values. Can also object class sf, example returned extract_osm_objects osmdata package, case bounding box extracted object coordinates.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_line2poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"osm_line2poly — osm_line2poly","text":"list three Simple Features (sf) data frames, labelled sea islands land.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_line2poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"osm_line2poly — osm_line2poly","text":"tricky problem number reasons, current implementation may correct, although successfully deal tough situations. issues : osm coastline query returns mixture \"ways\" polygons. Polygons correspond islands, islands polygons. \"way\" connected set points land left. piece coastline bounding box may consist multiple ways, need connected together create polygon. Also, ways extend outside query bounding box, may join ways enter bounding box (e.g ends peninsula). degree happens depends scale bounding box. Coastlines may enter bounding box edge exit , including one entered .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_line2poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"osm_line2poly — osm_line2poly","text":"","code":"# This example uses the \\code{osmdata} package to extract data from # a named bounding box if (FALSE) { # \\dontrun{ library (magrittr) library (osmdata) bb <- osmdata::getbb (\"melbourne, australia\") coast <- extract_osm_objects (     bbox = bb,     key = \"natural\",     value = \"coastline\",     return_type = \"line\" ) coast <- osm_line2poly (coast, bbox = bb) # The following map then colours in just the ocean: map <- osm_basemap (bbox = bb) %>%     add_osm_objects (coast$sea, col = \"lightsteelblue\") %>%     print_osm_map () } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_structures.html","id":null,"dir":"Reference","previous_headings":"","what":"osm_structures — osm_structures","title":"osm_structures — osm_structures","text":"given vector structure types returns data.frame containing two columns corresponding OpenStreetMap key-value pairs, one column unambiguous suffixes appended objects returned extract_osm_objects, one column specifying colours. data.frame may subsequently modified desired, ultimately passed make_osm_map automate map production.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_structures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osm_structures — osm_structures","text":"","code":"osm_structures(   structures = c(\"building\", \"amenity\", \"waterway\", \"grass\", \"natural\", \"park\",     \"highway\", \"boundary\", \"tree\"),   col_scheme = \"dark\" )"},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_structures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osm_structures — osm_structures","text":"structures vector types structures (defaults listed extract_osm_objects). col_scheme Colour scheme plot (current options include dark light).","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_structures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"osm_structures — osm_structures","text":"data.frame structures, key-value pairs, corresponding prefixes, colours.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/osm_structures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"osm_structures — osm_structures","text":"","code":"# Default structures: osm_structures () #>     structure      key value suffix      cols #> 1    building building           BU #646464FF #> 2     amenity  amenity            A #787878FF #> 3    waterway waterway            W #646478FF #> 4       grass  landuse grass      G #64A064FF #> 5     natural  natural            N #647864FF #> 6        park  leisure  park      P #647864FF #> 7     highway  highway            H #000000FF #> 8    boundary boundary           BO #C8C8C8FF #> 9        tree  natural  tree      T #64A064FF #> 10 background                          gray20 # user-defined structures: structures <- c (\"highway\", \"park\", \"ameniiy\", \"tree\") structs <- osm_structures (structures = structures, col_scheme = \"light\") # make_osm_map returns potentially modified list of data if (FALSE) { # \\dontrun{ dat <- make_osm_map (osm_data = london, structures = structs) # map contains updated $osm_data and actual map in $map print_osm_map (dat$map) } # }"},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":null,"dir":"Reference","previous_headings":"","what":"osmplotr. — osmplotr","title":"osmplotr. — osmplotr","text":"Produces customisable images OpenStreetMap (OSM) data enables data visualisation using OSM objects.  Extracts data using overpass API. Contains following functions, data, vignettes.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"data-functions","dir":"Reference","previous_headings":"","what":"Data Functions","title":"osmplotr. — osmplotr","text":"extract_osm_objects: Download arbitrary OSM objects connect_highways: Returns points sequentially connecting list named highways","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"basic-plotting-functions-without-data-","dir":"Reference","previous_headings":"","what":"Basic Plotting Functions (without data)","title":"osmplotr. — osmplotr","text":"add_axes: Overlay longitudinal latitudinal axes plot add_osm_objects: Overlay arbitrary OSM objects make_osm_map: Automate map production structures defined osm_structures osm_structures: Define structures graphics schemes automating map production osm_basemap: Initiate ggplot2 object OSM map print_osm_map: Print map specified graphics device","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"advanced-plotting-functions-with-data-","dir":"Reference","previous_headings":"","what":"Advanced Plotting Functions (with data)","title":"osmplotr. — osmplotr","text":"add_osm_groups: Overlay groups objects using specified colour scheme add_osm_surface: Overlay data surface interpolating given data add_colourbar: Overlay scaled colourbar data added add_osm_surface","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"colour-manipulation-functions","dir":"Reference","previous_headings":"","what":"Colour Manipulation Functions","title":"osmplotr. — osmplotr","text":"adjust_colours: Lighted darken given colours specified amount colour_mat: Generate continuous 2D spatial matrix colours","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"other-functions","dir":"Reference","previous_headings":"","what":"Other Functions","title":"osmplotr. — osmplotr","text":"get_bbox: return bounding box input vector","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"data","dir":"Reference","previous_headings":"","what":"Data","title":"osmplotr. — osmplotr","text":"london: OSM Data small portion central London","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"vignettes","dir":"Reference","previous_headings":"","what":"Vignettes","title":"osmplotr. — osmplotr","text":"basic-maps: Describes basics downloading data making custom maps data-maps: Describes map elements can coloured according user-provided data, whether categorical continuous","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/osmplotr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"osmplotr. — osmplotr","text":"Maintainer: Mark Padgham mark.padgham@email.com Authors: Richard Beare contributors: Finkelstein Noam (Author included stub.R code) [contributor, copyright holder] Bartnik Lukasz (Author included stub.R code) [contributor, copyright holder]","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/print_osm_map.html","id":null,"dir":"Reference","previous_headings":"","what":"print_osm_map — print_osm_map","title":"print_osm_map — print_osm_map","text":"Prints OSM map produced osmplotr specified graphics device.","code":""},{"path":"https://docs.ropensci.org/osmplotr/reference/print_osm_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print_osm_map — print_osm_map","text":"","code":"print_osm_map(   map,   width,   height,   filename,   device,   units = c(\"in\", \"cm\", \"mm\", \"px\"),   dpi = 300 )"},{"path":"https://docs.ropensci.org/osmplotr/reference/print_osm_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print_osm_map — print_osm_map","text":"map map printed; ggplot2 object produced osmplotr. width Desired width graphics device. height Desired height graphics device. Ignored width specified. filename Name file map printed. device Type graphics device (extracted filename extension explicitly provided). units Units height width graphics device. dpi Resolution graphics device (dots-per-inch).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/reference/print_osm_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print_osm_map — print_osm_map","text":"","code":"bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52)) map <- osm_basemap (bbox = bbox, bg = \"gray20\") map <- add_osm_objects (map, london$dat_BNR, col = \"gray40\") print_osm_map (map, width = 7) # prints to screen device if (FALSE) { # \\dontrun{ print_osm_map (map, file = \"map.png\", width = 500, units = \"px\") } # }"},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v033x-dev","dir":"Changelog","previous_headings":"","what":"osmplotr v0.3.3.X (dev)","title":"osmplotr v0.3.3.X (dev)","text":"CRAN release: 2021-03-27","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"minor-changes-0-3-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"osmplotr v0.3.3.X (dev)","text":"Replace now obsolete ‘spatstat.core’ ‘spatstat.explore’ dependency","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v033","dir":"Changelog","previous_headings":"","what":"osmplotr v0.3.3","title":"osmplotr v0.3.3","text":"CRAN release: 2021-03-27","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"minor-changes-0-3-3-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"osmplotr v0.3.3","text":"Changes response spatstat v2 updates","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"minor-changes-0-3-3-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"osmplotr v0.3.3","text":"‘add_osm_surface’ functions changed directly calculate plot colours objects, rather rely ggplot2::scale_fill_gradientn.","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v032","dir":"Changelog","previous_headings":"","what":"osmplotr v0.3.2","title":"osmplotr v0.3.2","text":"CRAN release: 2018-12-19","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"minor-changes-0-3-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"osmplotr v0.3.2","text":"‘verbose’ parameter ‘extract_osm_objects’ renamed ‘quiet’","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"major-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"osmplotr v0.3.1","text":"New function ‘osm_line2poly’ enables plotting polygonal shapes delineated lines, tracing around bounding box form full polygons. New vignette describe functionality, “maps--ocean”.","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"minor-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"osmplotr v0.3.1","text":"‘osm_basemap’ now accepts ‘sf’ object instead explicit ‘bbox’ values, extracts corresponding ‘bbox’ directly object.","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v030","dir":"Changelog","previous_headings":"","what":"osmplotr v0.3.0","title":"osmplotr v0.3.0","text":"CRAN release: 2017-06-30","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"osmplotr v0.3.0","text":"Major re-structure use ‘osmdata’ package instead ‘osmar’, concomitantly enormous increase speed ‘extract_osm_objects’ Package now also ‘sf’-compatible: objects plotted can either ‘sp’ ‘sf’ format, ‘osmplotr’ functions defaulting ‘sf’","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"minor-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"osmplotr v0.3.0","text":"Title DESCRIPTION changed “Customisable Images OpenStreetMap Data” “Bespoke Images ‘OpenStreetMap’ Data” Better control timeout errors calling overpass API Git host transferred ropenscilabs ropensci Acknowledge OSM contributors startup Rename ‘borderWidth’ parameter ‘add_osm_groups’ ‘border_width’ ‘connect_highways’ also entirely re-coded much efficient, affect functionality .","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v023","dir":"Changelog","previous_headings":"","what":"osmplotr v0.2.3","title":"osmplotr v0.2.3","text":"CRAN release: 2016-07-13 add ‘return_type’ argument ‘extract_osm_objects’ enable explicit specification return type (points, lines, polygons) fix tests pass even download fails","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v022","dir":"Changelog","previous_headings":"","what":"osmplotr v0.2.2","title":"osmplotr v0.2.2","text":"CRAN release: 2016-07-05 ‘add_osm_surface’ previously work properly different bboxes (zooming possible). Now fixed. ‘add_osm_surface’ ‘add_osm_groups’ now enable maps zoomed fix make_osm_map produce maps even requested data exists","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v021","dir":"Changelog","previous_headings":"","what":"osmplotr v0.2.1","title":"osmplotr v0.2.1","text":"CRAN release: 2016-06-02 vignette ‘making-maps’ renamed ‘basic-maps’ tidied vignette ‘making-maps--data’ renamed ‘data-maps’ tidied ‘plot_osm_basemap’ renamed ‘osm_basemap’, now uses ‘ggplot2::coord_equal()’ ensure maps scaled bounding boxes. ‘print_osm_map’ added enable device proportions automatically scaled bounding boxes. manual entries cleaned remove non-exported functions","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v020","dir":"Changelog","previous_headings":"","what":"osmplotr v0.2.0","title":"osmplotr v0.2.0","text":"CRAN release: 2016-04-27 Major update (almost) plotting routines shifted ‘graphics::plot’ ‘ggplot2’. previous parameters specifying graphics devices (heights widths) longer apply. Changes: vignette ‘downloading-data’ removed (incorporate ‘making-maps’) vignette ‘making-maps’ extended vignette ‘making-maps--data’ added Extensive examples added functions ‘click_map’ removed ‘connect_highways’ renamed ‘get_highway_cycle’ ‘highways2polygon’ renamed ‘connect_highways’ ‘extract_highway’, ‘extract_highways’, ‘order_lines’ longer exported ‘extract_osm_objects’ now just returns objects (instead ‘obj′′obj'   'warn’), dumps warnings direct screen. ‘add_osm_groups’ now accepts lists simple spatial points groups Coordinate reference system properly attributed objects many tests added Change ‘ggplot2’ considerably changed structure many functions. details see function examples vignettes","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v01-3","dir":"Changelog","previous_headings":"","what":"osmplotr v0.1-3","title":"osmplotr v0.1-3","text":"CRAN release: 2016-03-23 Changes: added ‘add_axes’ plot lat-lon axes added ‘add_osm_surface’ spatially interpolate continuous surfaces user-defined data added ‘add_colourbar’ plot colourbar legend ‘add_osm_surface’ renamed ‘group_osm_objects’ ‘add_osm_groups’ added ‘adjust_colours’ allow colours lightened darkened usages ‘xylims’ (vectors four components) ‘get_xylims’ changed ‘bbox’ (2--2 matrices) consistency sp tmap reduce size ‘london’ data (smaller bbox), corresponding changes vignettes","code":""},{"path":"https://docs.ropensci.org/osmplotr/news/index.html","id":"osmplotr-v01-1-01-2","dir":"Changelog","previous_headings":"","what":"osmplotr v0.1-1, 0.1-2","title":"osmplotr v0.1-1, 0.1-2","text":"CRAN release: 2016-03-02 Published CRAN","code":""}]
